# SPDX-FileCopyrightText: 2021 Andrea Pappacoda
#
# SPDX-License-Identifier: AGPL-3.0-or-later

name: linux

on: push

defaults:
  run:
    shell: sh

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  linux:
    strategy:
      fail-fast: false
      matrix:
        os: [ 'debian:stable', 'debian:testing', 'redhat/ubi8:latest' ]
        compiler: [ 'gcc', 'clang' ]
        sanitizer: [ 'address', 'thread', 'undefined', 'memory' ]

    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.os }}

    steps:
    - name: Install dependencies (Debian)
      if: contains(matrix.os, 'debian')
      run: |
        if [ ${{ matrix.compiler }} = gcc ]; then compiler=g++; else compiler=clang; fi
        apt-get -qq update
        apt-get -qq install $compiler meson pkgconf cmake libcurl4-openssl-dev libsimdjson-dev libinih-dev git curl gpg gpgv lcov llvm

    - name: Install dependencies (Red Hat)
      if: contains(matrix.os, 'redhat')
      run: |
        if [ ${{ matrix.compiler }} = gcc ]; then compiler=gcc-c++; else compiler=clang; fi
        yum install -y $compiler pkgconf cmake libcurl-devel git python3 gnupg
        pip3 install meson ninja

    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Configure Meson
      run: |
        if expr ${{ matrix.os }} : ".*redhat" >/dev/null; then enable_tests=false; else enable_tests=true; fi
        record_name=$(printf '${{ matrix.sanitizer }}.${{ matrix.compiler }}.${{ matrix.os }}.${{ github.workflow }}.ci.${{ secrets.DOMAIN_NAME }}' | tr -dc '[:alnum:].')
        meson setup build -Dtests=$enable_tests -Dtest_api_token='${{ secrets.API_TOKEN }}' -Dtest_zone_id='${{ secrets.ZONE_ID }}' -Dtest_record_name="$record_name" --buildtype=debug -Db_coverage=true -Db_sanitize=${{ matrix.sanitizer }}

    - name: Build
      run: ninja -C build

    - name: Test
      if: ${{ !contains(matrix.os, 'redhat') }}
      run: meson test -C build --verbose

    - name: Coverage
      if: ${{ !contains(matrix.os, 'redhat') }}
      run: |
        mkdir --parents $HOME/.local/bin
        if [ "${{ matrix.compiler }}" = 'clang' ]; then printf 'llvm-cov gcov "$@"' > $HOME/.local/bin/cov.sh; else printf 'gcov "$@"' > $HOME/.local/bin/cov.sh; fi && chmod +x $HOME/.local/bin/cov.sh
        lcov --capture --output-file coverage.info --directory . --gcov-tool $HOME/.local/bin/cov.sh --exclude '/usr/*' --exclude "${HOME}"'/.cache/*' --exclude '*/tests/*' --exclude '*/subprojects/*'
        lcov --list coverage.info
        curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
        curl --silent --remote-name https://uploader.codecov.io/latest/linux/codecov
        curl --silent --remote-name https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
        curl --silent --remote-name https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
        gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
        sha256sum --check codecov.SHA256SUM
        chmod +x codecov
        ./codecov

    - name: Store compiled program
      uses: actions/upload-artifact@v2
      with:
        name: cloudflare-ddns-linux
        path: build/cloudflare-ddns
